import asyncio
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import openai
import os

openai.api_key = os.getenv("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")
TELEGRAM_TOKEN = os.getenv("7392121079:AAGeWxyeFROtTE0kDm7FlkiqO6UYBwLu9UU")

SYSTEM_MESSAGE = (
    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ù–∞—Ç–∞–ª—å–∏, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞–º –ú–æ—Å–∫–≤—ã. "
    "–û–±—â–∞–µ—à—å—Å—è —Å —Ä–∏–µ–ª—Ç–æ—Ä–∞–º–∏ ‚Äî —Ç–µ–ø–ª–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –±–µ–∑ –æ—Ñ–∏—Ü–∏–æ–∑–∞. "
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å, –ø–æ–º–æ–≥–∞–µ—à—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. "
    "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–æ–≤–∏—á–æ–∫ ‚Äî –ø–æ–¥—Å–∫–∞–∂–∏, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –ï—Å–ª–∏ –æ–ø—ã—Ç–Ω—ã–π ‚Äî –ø–æ–º–æ–≥–∏ —É—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç."
)

async def ask_chatgpt(message):
    client = openai.OpenAI()
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": SYSTEM_MESSAGE},
                {"role": "user", "content": message}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ù–∞—Ç–∞–ª—å–∏. –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –î–∑–µ–Ω–æ–º üòä")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    reply = await ask_chatgpt(user_message)
    await update.message.reply_text(reply)

async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
